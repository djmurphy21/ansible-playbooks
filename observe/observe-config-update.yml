---
# Synopsis
# This playbook manages the observe-agent service on all target hosts by stopping the service, updating configuration files, restarting the service, and validating its status.

# Description
# The playbook performs the following tasks:
# 1. Stops the observe-agent service to safely apply configuration changes.
# 2. Copies the custom otel-collector configuration file to the specified directory on the target host.
# 3. Copies the custom logs configuration file to the specified directory on the target host.
# 4. Restarts the observe-agent service to apply the new configurations.
# 5. Ensures the observe-agent service is running and enabled to start at boot.

# Notes
# - Verify that configuration file paths are correct and accessible.
# - Ensure the observe-agent service is installed and configured correctly on all target hosts.
# - Adjust file permissions and ownership as needed to match your environment.

# Example
# To run this playbook, execute:
# ansible-playbook -i <inventory_file> <playbook.yml> --limit <hostname_or_group>
#
# Replace `<inventory_file>` with the path to your inventory file and `<playbook.yml>` with the name of this playbook.

- name: Update Observe configuration
  hosts: all
  become: true

  vars:
    observe_agent_service: observe-agent
    observe_config_dir: /etc/observe-agent
    observe_logs_dir: "{{ observe_config_dir }}/connections/host_monitoring"
    file_owner: root
    file_group: root
    file_mode: '0644'

  pre_tasks:
    - name: Verify observe-agent service exists
      stat:
        path: /etc/systemd/system/{{ observe_agent_service }}.service
      register: service_status
      failed_when: not service_status.stat.exists
      
    - name: Verify configuration directories exist
      stat:
        path: "{{ item }}"
      loop:
        - "{{ observe_config_dir }}"
        - "{{ observe_logs_dir }}"
      register: dir_check
      failed_when: not dir_check.stat.exists

  tasks:
    - name: Stop Observe Agent Service
      service:
        name: "{{ observe_agent_service }}"
        state: stopped
      register: service_stop
      failed_when: 
        - service_stop.failed is defined
        - service_stop.failed

    - name: Gather facts
      setup:

    - name: Create backup of current configuration
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}.backup-{{ ansible_date_time.date }}"
        remote_src: yes
      loop:
        - { src: "{{ observe_config_dir }}/otel-collector.yaml", dest: "{{ observe_config_dir }}/otel-collector.yaml" }
        - { src: "{{ observe_logs_dir }}/logs.yaml", dest: "{{ observe_logs_dir }}/logs.yaml" }
      when: service_stop is success
      ignore_errors: yes

    - name: Copy otel-collector configuration
      copy:
        src: "{{ role_path }}/files/observe/{% if os_version == '24.04' %}{{ os_version }}-{% endif %}otel-collector.yaml"
        dest: "{{ observe_config_dir }}/otel-collector.yaml"
        owner: "{{ file_owner }}"
        group: "{{ file_group }}"
        mode: "{{ file_mode }}"
        validate: 'python -c "import yaml; yaml.safe_load(open(\"%s\", \"r\").read())"'
      when: ansible_os_family == 'Debian'
      register: otel_config

    - name: Copy logs configuration
      copy:
        src: "{{ role_path }}/files/observe/{% if os_version == '24.04' %}{{ os_version }}-{% endif %}logs.yaml"
        dest: "{{ observe_logs_dir }}/logs.yaml"
        owner: "{{ file_owner }}"
        group: "{{ file_group }}"
        mode: "{{ file_mode }}"
        validate: 'python -c "import yaml; yaml.safe_load(open(\"%s\", \"r\").read())"'
      when: ansible_os_family == 'Debian'
      register: logs_config

    - name: Start and enable observe-agent service
      systemd:
        name: "{{ observe_agent_service }}"
        state: started
        enabled: yes
        daemon_reload: yes
      register: service_start

    - name: Verify service is running
      systemd:
        name: "{{ observe_agent_service }}"
      register: service_status
      failed_when: service_status.status.ActiveState != "active"

    - name: Show service status
      debug:
        msg: "Observe agent service status: {{ service_status.status.ActiveState }}"

  handlers:
    - name: Restore configuration backup on failure
      copy:
        src: "{{ item }}.backup-{{ ansible_date_time.date }}"
        dest: "{{ item }}"
        remote_src: yes
      loop:
        - "{{ observe_config_dir }}/otel-collector.yaml"
        - "{{ observe_logs_dir }}/logs.yaml"
      when: (otel_config.failed is defined and otel_config.failed) or 
            (logs_config.failed is defined and logs_config.failed) or
            (service_start.failed is defined and service_start.failed)
      ignore_errors: yes
